/*
 *=========================================
 *       TEST INSTRUCTIONS
 *=========================================
 *
 * You can Modify the data of the tests. There are the followings test suites:
 *   - Test simple trip:                A → B [stay] B → A
 *   - Test continuous trip (2 stays):  A → B [stay] B → C [stay] C → A
 *   - Test continuous trip (5 stays):  A → B [stay] B → C [stay] C → D [stay] D → E [stay] E → F [stay] F → A
 *   - Test overlapping stays trip:     A → B [stay] B → C [stay] C → B [stay] B → A
 *   - Test transbord trip:             A → B → C [stay] C → B → A
 */

const TIME = {
  SEC: 1000,
  MIN: 60 * 1000,
  HOUR: 60 * 60 * 1000,
  DAY: 24 * 60 * 60 * 1000,
  EXTRA_DAYS: 7,
};
const TEST_STATE = {
  SUITE: {
    CREATE: true,
    CLEAN: false,
  },
  SCENARIO: {
    SIMPLE: testSimpleTrip,
    TWO_STAYS: testContinuousStaysShortTrip,
    FIVE_STAYS: testContinuousStaysLongTrip,
    OVERLAPPING: testOverlappingStays,
    TRANSBORD: testTransbordTrip,
    COMPLEX: null,
  },
  DESCRIPTION: "This is an automatically event generated by testSuite",
};

const TEST_SUITE_SCENARIO = TEST_STATE.SCENARIO.OVERLAPPING;

/*
 *=========================================
 *               TEST DATA
 *=========================================
 */

var testSimpleTrip = [
  // SIMPLE TRIP
  {
    title: "Train to MADRID-CHAMARTÍN-CLARA CA",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 7) * TIME.DAY),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 7) * TIME.DAY + 155 * TIME.MIN),
    location: "SALAMANCA",
  },
  {
    title: "Train to SALAMANCA",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 10) * TIME.DAY + 250 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 10) * TIME.DAY + 360 * TIME.MIN),
    location: "MADRID-CHAMARTÍN-CLARA CA",
  },
];

var testContinuousStaysShortTrip = [
  // 2 CONTINUOUS STAYS TRIP
  {
    title: "Flight to MUNICH",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 12) * TIME.DAY),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 12) * TIME.DAY + 155 * TIME.MIN),
    location: "MADRID",
  },
  {
    title: "Train to HAMBURGO",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 13) * TIME.DAY + 250 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 13) * TIME.DAY + 360 * TIME.MIN),
    location: "MUNICH",
  },
  {
    title: "FLIGHT to MADRID",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 15) * TIME.DAY - 100 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 15) * TIME.DAY + 25 * TIME.MIN),
    location: "HAMBURGO",
  },
];

var testContinuousStaysLongTrip = [
  // 5 CONTINUOUS STAYS TRIP
  {
    title: "Flight to MUNICH",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 12) * TIME.DAY),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 12) * TIME.DAY + 221 * TIME.MIN),
    location: "MADRID",
  },
  {
    title: "Train to BERLIN",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 13) * TIME.DAY + 250 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 13) * TIME.DAY + 360 * TIME.MIN),
    location: "MUNICH",
  },
  {
    title: "Train to HAMBURGO",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 15) * TIME.DAY - 100 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 15) * TIME.DAY + 25 * TIME.MIN),
    location: "BERLIN",
  },
  {
    title: "Train to BREMEN",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 17) * TIME.DAY - 400 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 17) * TIME.DAY - 225 * TIME.MIN),
    location: "HAMBURGO",
  },
  {
    title: "Train to COPENHAGEN",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 18) * TIME.DAY + 500 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 18) * TIME.DAY + 610 * TIME.MIN),
    location: "BREMEN",
  },
  {
    title: "FLIGHT to MADRID",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 22) * TIME.DAY),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 22) * TIME.DAY + 240 * TIME.MIN),
    location: "COPENHAGEN",
  },
];

var testOverlappingStays = [
  // 2 OVERLAPPING STAYS TRIP
  {
    title: "Train to MADRID-CHAMARTÍN-CLARA CA",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 7) * TIME.DAY),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 7) * TIME.DAY + 155 * TIME.MIN),
    location: "SALAMANCA",
  },
  {
    title: "Train to SANTANDER",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 10) * TIME.DAY + 250 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 10) * TIME.DAY + 360 * TIME.MIN),
    location: "MADRID-CHAMARTÍN-CLARA CA",
  },
  {
    title: "Train to MADRID-CHAMARTÍN-CLARA CA",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 13) * TIME.DAY + 250 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 13) * TIME.DAY + 360 * TIME.MIN),
    location: "SANTANDER",
  },
  {
    title: "Train to SALAMANCA",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 18) * TIME.DAY + 500 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 18) * TIME.DAY + 610 * TIME.MIN),
    location: "MADRID-CHAMARTÍN-CLARA CA",
  },
];

var testTransbordTrip = [
  // TRIPS WITH TRANSBORD
  {
    title: "Train to MADRID-CHAMARTÍN-CLARA CA",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 7) * TIME.DAY),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 7) * TIME.DAY + 155 * TIME.MIN),
    location: "SALAMANCA",
  },
  {
    title: "Train to SANTANDER",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 7) * TIME.DAY + 175 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 7) * TIME.DAY + 255 * TIME.MIN),
    location: "MADRID-CHAMARTÍN-CLARA CA",
  },
  {
    title: "Train to MADRID-CHAMARTÍN-CLARA CA",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 13) * TIME.DAY + 150 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 13) * TIME.DAY + 260 * TIME.MIN),
    location: "SANTANDER",
  },
  {
    title: "Train to SALAMANCA",
    startTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 13) * TIME.DAY + 285 * TIME.MIN),
    endTime: new Date(Date.now() + (TIME.EXTRA_DAYS + 13) * TIME.DAY + 370 * TIME.MIN),
    location: "MADRID-CHAMARTÍN-CLARA CA",
  },
];

//=====================================================================================================
//!!!!!!!!!!!!!!!! DO NOT EDIT BELOW HERE UNLESS YOU REALLY KNOW WHAT YOU'RE DOING !!!!!!!!!!!!!!!!!!!!
//=====================================================================================================

/*
 *=========================================
 *               TEST SUITE
 *=========================================
 */

// Per-calendar global variables (must be reset before processing each new calendar!)
var sourceCalendar;
var targetCalendar;

function runTest() {
  startTestSuite_();
  createTestEvents_();
}

function cleanTest() {
  startTestSuite_();
  cleanTestEvents_();
}

function startTestSuite_() {
  PropertiesService.getUserProperties().setProperty("LastRun", new Date().getTime());
  resetGlobals();

  sourceCalendar = getCalendar(CONFIG.SOURCE_CALENDAR);
  if (!sourceCalendar) return logError("Source calendar not found!");

  targetCalendar = getCalendar(CONFIG.TARGET_CALENDAR);
  if (!targetCalendar) return logError("Target calendar not found!");
}

/**
 * Create test suite with testData
 */
function createTestEvents_() {
  var testData = TEST_SUITE_SCENARIO;

  Logger.log("- Creating test suite");

  for (var test of testData) {
    let event = test;
    sourceCalendar.createEvent(event.title, event.startTime, event.endTime, {
      location: event.location,
      description: TEST.DESCRIPTION,
    });

    Logger.log(`  * Created event ${event.title} from ${event.startTime} to ${event.endTime}`);
  }
}

/**
 * Create test suite with testData
 */
function cleanTestEvents_() {
  let oneMonthFromNow = new Date(CONFIG.NOW.getTime() + 1 * 30 * TIME.DAY);

  let eventsSource = sourceCalendar.getEvents(CONFIG.NOW, oneMonthFromNow);
  let eventsTarget = targetCalendar.getEvents(CONFIG.NOW, oneMonthFromNow);

  // Check if events or stays exist
  if (eventsSource.length || eventsTarget.length) {
    Logger.log("  - Cleaning test suite");

    // Events on sourceCalendar
    for (var event of eventsSource) {
      // Delete trip if test-description matches
      if (event.getDescription() === TEST.DESCRIPTION) {
        event.deleteEvent();
      }

      let tripEndTime = sourceCalendar.getEventById(event.getId()).getEndTime();

      for (var stay of eventsTarget) {
        let stayStartTime = targetCalendar.getEventById(stay.getId()).getStartTime();

        // Delete stay if difference is less than 1 min
        if (checkTwoDates(stayStartTime, tripEndTime, 1)) {
          stay.deleteEvent();
        }
      }
    }

    // Events on targetCalendar (if they were moved)
    for (var event of eventsTarget) {
      // Delete trip if test-description matches
      if (event.getDescription() === TEST.DESCRIPTION) {
        event.deleteEvent();
      }

      let tripEndTime = targetCalendar.getEventById(event.getId()).getEndTime();

      for (var stay of eventsTarget) {
        let stayStartTime = targetCalendar.getEventById(stay.getId()).getStartTime();

        // Delete stay if difference is less than 1 min
        if (checkTwoDates(stayStartTime, tripEndTime, 1)) {
          stay.deleteEvent();
        }
      }
    }
  } else {
    Logger.log("  - [❗] Cleaning test suite could not get events on Source or Target Calendar");
  }
}
